// 1. Student 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "S_STUDENTS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "STUDENT_CODE", unique = true, nullable = false, length = 20)
    private String studentCode;

    @Column(name = "STUDENT_NAME", nullable = false, length = 50)
    private String studentName;

    @Column(name = "AGE", nullable = false)
    private Integer age; // 对应数据库的 tinyint

    @Column(name = "AGE_GROUP", nullable = false)
    private Integer ageGroup; // 对应数据库的 tinyint

    @Column(name = "PARENT_NAME", nullable = false, length = 50)
    private String parentName;

    @Column(name = "PARENT_PHONE", nullable = false, length = 15)
    private String parentPhone;

    @Column(name = "PARENT_EMAIL", length = 100)
    private String parentEmail;

    @Column(name = "REGISTRATION_STATUS")
    private Integer registrationStatus = 2; // 1-待审核 2-已通过 3-已拒绝

    @Column(name = "IS_ACTIVE")
    private Boolean isActive = true;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    @PrePersist
    private void generateStudentCode() {
        if (this.studentCode == null) {
            this.studentCode = "STU" + System.currentTimeMillis();
        }
        // 根据年龄自动设置年龄组
        if (this.age != null) {
            if (this.age >= 1 && this.age <= 3) {
                this.ageGroup = 1; // 学前班
            } else if (this.age > 3 && this.age <= 6) {
                this.ageGroup = 2; // 小班
            } else if (this.age > 6 && this.age <= 9) {
                this.ageGroup = 3; // 中班
            } else if (this.age > 9 && this.age <= 12) {
                this.ageGroup = 4; // 大班
            }
        }
    }
}

// 2. Classroom 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "J_CLASSROOMS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Classroom {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "CLASSROOM_CODE", unique = true, nullable = false, length = 20)
    private String classroomCode;

    @Column(name = "CLASSROOM_NAME", nullable = false, length = 100)
    private String classroomName;

    @Column(name = "MAX_CAPACITY", nullable = false)
    private Integer maxCapacity;

    @Column(name = "LOCATION", length = 200)
    private String location;

    @Column(name = "FACILITIES", columnDefinition = "TEXT")
    private String facilities;

    @Column(name = "IS_ACTIVE")
    private Boolean isActive = true;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    @PrePersist
    private void generateClassroomCode() {
        if (this.classroomCode == null) {
            this.classroomCode = "CLS" + System.currentTimeMillis();
        }
    }
}

// 3. Course 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "K_COURSES")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "COURSE_CODE", unique = true, nullable = false, length = 20)
    private String courseCode;

    @Column(name = "COURSE_NAME", nullable = false, length = 100)
    private String courseName;

    @Column(name = "AGE_GROUP", nullable = false)
    private Integer ageGroup; // 对应数据库的 tinyint

    @Column(name = "MAX_STUDENTS", nullable = false)
    private Integer maxStudents;

    @Column(name = "DESCRIPTION", columnDefinition = "TEXT")
    private String description;

    @Column(name = "TEACHER_NAMES", length = 200)
    private String teacherNames; // 教师姓名（多个用逗号分隔）

    @Column(name = "IS_ACTIVE")
    private Boolean isActive = true;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    @PrePersist
    private void generateCourseCode() {
        if (this.courseCode == null) {
            this.courseCode = "COU" + System.currentTimeMillis();
        }
    }
}

// 4. CourseSchedule 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;

@Entity
@Table(name = "T_COURSE_SCHEDULE")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CourseSchedule {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "COURSE_ID", nullable = false)
    private Long courseId;

    @Column(name = "TIME_SLOT_ID", nullable = false)
    private Long timeSlotId;

    @Column(name = "CLASSROOM_ID", nullable = false)
    private Long classroomId;

    @Column(name = "SCHEDULE_DATE", nullable = false)
    private LocalDate scheduleDate;

    @Column(name = "STATUS")
    private Integer status = 1; // 1-正常 2-取消 3-调课

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    // 关联查询
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COURSE_ID", insertable = false, updatable = false)
    private Course course;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TIME_SLOT_ID", insertable = false, updatable = false)
    private TimeSlot timeSlot;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLASSROOM_ID", insertable = false, updatable = false)
    private Classroom classroom;
}

// 5. Teacher 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "L_TEACHERS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Teacher {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "TEACHER_CODE", unique = true, nullable = false, length = 20)
    private String teacherCode;

    @Column(name = "TEACHER_NAME", nullable = false, length = 50)
    private String teacherName;

    @Column(name = "PHONE", nullable = false, length = 15)
    private String phone;

    @Column(name = "EMAIL", length = 100)
    private String email;

    @Column(name = "SPECIALTIES", columnDefinition = "TEXT")
    private String specialties;

    @Column(name = "AGE_GROUPS", nullable = false, length = 20)
    private String ageGroups; // 可教年龄组 1,2,3,4

    @Column(name = "IS_ACTIVE")
    private Boolean isActive = true;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    @PrePersist
    private void generateTeacherCode() {
        if (this.teacherCode == null) {
            this.teacherCode = "TEA" + System.currentTimeMillis();
        }
    }
}

// 6. TeacherAssignment 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "L_TEACHER_ASSIGNMENTS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TeacherAssignment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "TEACHER_ID", nullable = false)
    private Long teacherId;

    @Column(name = "COURSE_SCHEDULE_ID", nullable = false)
    private Long courseScheduleId;

    @Column(name = "IS_MAIN_TEACHER")
    private Boolean isMainTeacher = false;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    // 关联查询
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TEACHER_ID", insertable = false, updatable = false)
    private Teacher teacher;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COURSE_SCHEDULE_ID", insertable = false, updatable = false)
    private CourseSchedule courseSchedule;
}

// 7. StudentEnrollment 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "S_STUDENT_ENROLLMENTS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class StudentEnrollment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "STUDENT_ID", nullable = false)
    private Long studentId;

    @Column(name = "COURSE_SCHEDULE_ID", nullable = false)
    private Long courseScheduleId;

    @Column(name = "ENROLLMENT_STATUS")
    private Integer enrollmentStatus = 1; // 1-已选 2-已取消

    @Column(name = "ENROLLMENT_DATE")
    private LocalDateTime enrollmentDate;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    // 关联查询
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STUDENT_ID", insertable = false, updatable = false)
    private Student student;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COURSE_SCHEDULE_ID", insertable = false, updatable = false)
    private CourseSchedule courseSchedule;
}

// 8. ClassroomUsage 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;

@Entity
@Table(name = "J_CLASSROOM_USAGE")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ClassroomUsage {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "CLASSROOM_ID", nullable = false)
    private Long classroomId;

    @Column(name = "COURSE_SCHEDULE_ID", nullable = false)
    private Long courseScheduleId;

    @Column(name = "USAGE_DATE", nullable = false)
    private LocalDate usageDate;

    @Column(name = "TIME_SLOT_ID", nullable = false)
    private Long timeSlotId;

    @Column(name = "ACTUAL_STUDENT_COUNT")
    private Integer actualStudentCount = 0;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    // 关联查询
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CLASSROOM_ID", insertable = false, updatable = false)
    private Classroom classroom;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COURSE_SCHEDULE_ID", insertable = false, updatable = false)
    private CourseSchedule courseSchedule;
}

// 9. CourseConfig 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "K_COURSE_CONFIGS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CourseConfig {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "COURSE_ID", nullable = false)
    private Long courseId;

    @Column(name = "MIN_TEACHERS")
    private Integer minTeachers = 1;

    @Column(name = "MAX_TEACHERS")
    private Integer maxTeachers = 3;

    @Column(name = "REQUIRED_FACILITIES", columnDefinition = "TEXT")
    private String requiredFacilities;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    // 关联查询
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "COURSE_ID", insertable = false, updatable = false)
    private Course course;
}

// 10. SystemConfig 实体类
package com.school.course.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Entity
@Table(name = "SYS_CONFIGS")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SystemConfig {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "CONFIG_KEY", unique = true, nullable = false, length = 100)
    private String configKey;

    @Column(name = "CONFIG_VALUE", nullable = false, columnDefinition = "TEXT")
    private String configValue;

    @Column(name = "DESCRIPTION", length = 200)
    private String description;

    @CreationTimestamp
    @Column(name = "CREATED_AT")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;
}